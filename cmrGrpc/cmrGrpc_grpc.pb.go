// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: cmrGrpc.proto

package cmrGrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CmrGrpcClient is the client API for CmrGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CmrGrpcClient interface {
	CreateNewCollection(ctx context.Context, in *NewCollection, opts ...grpc.CallOption) (*Collection, error)
}

type cmrGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewCmrGrpcClient(cc grpc.ClientConnInterface) CmrGrpcClient {
	return &cmrGrpcClient{cc}
}

func (c *cmrGrpcClient) CreateNewCollection(ctx context.Context, in *NewCollection, opts ...grpc.CallOption) (*Collection, error) {
	out := new(Collection)
	err := c.cc.Invoke(ctx, "/cmrGrpc.CmrGrpc/CreateNewCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CmrGrpcServer is the server API for CmrGrpc service.
// All implementations must embed UnimplementedCmrGrpcServer
// for forward compatibility
type CmrGrpcServer interface {
	CreateNewCollection(context.Context, *NewCollection) (*Collection, error)
	mustEmbedUnimplementedCmrGrpcServer()
}

// UnimplementedCmrGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedCmrGrpcServer struct {
}

func (UnimplementedCmrGrpcServer) CreateNewCollection(context.Context, *NewCollection) (*Collection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewCollection not implemented")
}
func (UnimplementedCmrGrpcServer) mustEmbedUnimplementedCmrGrpcServer() {}

// UnsafeCmrGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CmrGrpcServer will
// result in compilation errors.
type UnsafeCmrGrpcServer interface {
	mustEmbedUnimplementedCmrGrpcServer()
}

func RegisterCmrGrpcServer(s grpc.ServiceRegistrar, srv CmrGrpcServer) {
	s.RegisterService(&CmrGrpc_ServiceDesc, srv)
}

func _CmrGrpc_CreateNewCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewCollection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmrGrpcServer).CreateNewCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmrGrpc.CmrGrpc/CreateNewCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmrGrpcServer).CreateNewCollection(ctx, req.(*NewCollection))
	}
	return interceptor(ctx, in, info, handler)
}

// CmrGrpc_ServiceDesc is the grpc.ServiceDesc for CmrGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CmrGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cmrGrpc.CmrGrpc",
	HandlerType: (*CmrGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewCollection",
			Handler:    _CmrGrpc_CreateNewCollection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmrGrpc.proto",
}
